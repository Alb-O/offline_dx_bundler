//! Configuration describing the authored content layout and offline build context.

use std::path::{Path, PathBuf};

use crate::config::CollectionConfigOverrides;

/// Static layout describing how authored content and offline bundles are organised.
#[derive(Clone, Debug)]
pub struct OfflineProjectLayout {
  /// Directory containing static assets for each entry relative to the collection root.
  pub entry_assets_dir: String,
  /// Markdown file name used for authored entries.
  pub entry_markdown_file: String,
  /// Metadata file describing the collection (title, description, etc.).
  pub collection_metadata_file: String,
  /// Directory containing production-only assets that should be ignored.
  pub excluded_dir_name: String,
  /// Path fragment signalling that a file should be excluded from the offline bundle.
  pub excluded_path_fragment: String,
  /// Literal prefix applied when embedding collection assets in generated Rust code.
  pub collection_asset_literal_prefix: String,
  /// Relative path to the offline site root inside the bundle output.
  pub offline_site_root: String,
  /// Directory containing all collections relative to the manifest root.
  pub collections_dir_name: String,
  /// Output directory for the offline HTML bundle.
  pub offline_bundle_root: String,
  /// Index HTML file generated by `dx` for the application shell.
  pub index_html_file: String,
  /// Cargo target directory used for build artifacts.
  pub target_dir: String,
  /// Manifest JSON file produced by the build script.
  pub offline_manifest_json: String,
}

/// Runtime parameters required to build offline artifacts for a project.
pub struct OfflineBuildContext<'a> {
  /// Static layout describing the project.
  pub layout: OfflineProjectLayout,
  /// Directory containing the Cargo manifest.
  pub manifest_dir: &'a Path,
  /// Absolute path to the authored collections directory.
  pub collections_dir: &'a Path,
  /// Local path to the collections directory used for rerun hints.
  pub collections_local_path: &'a Path,
  /// Directory where assets referenced by markdown will be mirrored.
  pub asset_mirror_dir: PathBuf,
}

impl<'a> OfflineBuildContext<'a> {
  /// Construct a new build context with project-specific paths.
  pub fn new(
    layout: OfflineProjectLayout,
    manifest_dir: &'a Path,
    collections_dir: &'a Path,
    collections_local_path: &'a Path,
    asset_mirror_dir: PathBuf,
  ) -> Self {
    Self {
      layout,
      manifest_dir,
      collections_dir,
      collections_local_path,
      asset_mirror_dir,
    }
  }
}

impl OfflineProjectLayout {
  /// Directory relative to each collection containing authored assets.
  pub fn entry_assets_dir(&self) -> &str {
    self.entry_assets_dir.as_str()
  }

  /// Clone the layout applying collection-specific overrides.
  pub fn with_overrides(&self, overrides: &CollectionConfigOverrides) -> Self {
    let mut layout = self.clone();
    overrides.apply_to_layout(&mut layout);
    layout
  }
}

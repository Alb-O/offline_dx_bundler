//! Configuration describing the authored content layout and offline build context.

use std::path::{Path, PathBuf};

/// Static layout describing how authored content and offline bundles are organised.
#[derive(Clone, Copy, Debug)]
pub struct OfflineProjectLayout<'a> {
    /// Directory containing static assets for each entry relative to the collection root.
    pub entry_assets_dir: &'a str,
    /// Markdown file name used for authored entries.
    pub entry_markdown_file: &'a str,
    /// Metadata file describing the collection (title, description, etc.).
    pub collection_metadata_file: &'a str,
    /// Directory containing production-only assets that should be ignored.
    pub excluded_dir_name: &'a str,
    /// Path fragment signalling that a file should be excluded from the offline bundle.
    pub excluded_path_fragment: &'a str,
    /// Literal prefix applied when embedding collection assets in generated Rust code.
    pub collection_asset_literal_prefix: &'a str,
    /// Relative path to the offline site root inside the bundle output.
    pub offline_site_root: &'a str,
    /// Directory containing all collections relative to the manifest root.
    pub collections_dir_name: &'a str,
    /// Output directory for the offline HTML bundle.
    pub offline_bundle_root: &'a str,
    /// Index HTML file generated by `dx` for the application shell.
    pub index_html_file: &'a str,
    /// Cargo target directory used for build artifacts.
    pub target_dir: &'a str,
    /// Manifest JSON file produced by the build script.
    pub offline_manifest_json: &'a str,
}

/// Runtime parameters required to build offline artifacts for a project.
pub struct OfflineBuildContext<'a> {
    /// Static layout describing the project.
    pub layout: OfflineProjectLayout<'a>,
    /// Directory containing the Cargo manifest.
    pub manifest_dir: &'a Path,
    /// Absolute path to the authored collections directory.
    pub collections_dir: &'a Path,
    /// Local path to the collections directory used for rerun hints.
    pub collections_local_path: &'a Path,
    /// Directory where assets referenced by markdown will be mirrored.
    pub asset_mirror_dir: PathBuf,
}

impl<'a> OfflineBuildContext<'a> {
    /// Construct a new build context with project-specific paths.
    pub fn new(
        layout: OfflineProjectLayout<'a>,
        manifest_dir: &'a Path,
        collections_dir: &'a Path,
        collections_local_path: &'a Path,
        asset_mirror_dir: PathBuf,
    ) -> Self {
        Self {
            layout,
            manifest_dir,
            collections_dir,
            collections_local_path,
            asset_mirror_dir,
        }
    }
}

impl<'a> OfflineProjectLayout<'a> {
    /// Directory relative to each collection containing authored assets.
    pub fn entry_assets_dir(&self) -> &str {
        self.entry_assets_dir
    }
}
